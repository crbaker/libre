// Code generated by protoc-gen-go.
// source: libre.proto
// DO NOT EDIT!

/*
Package libre is a generated protocol buffer package.

It is generated from these files:
	libre.proto

It has these top-level messages:
	Empty
	SearchRequest
	SearchReply
	SaveBookReply
	SaveBookRequest
	FetchBooksReply
	Book
	Identifier
	ImageLink
*/
package libre

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SaveBookReply_ErrorCode int32

const (
	SaveBookReply_OK        SaveBookReply_ErrorCode = 0
	SaveBookReply_ERROR     SaveBookReply_ErrorCode = 1
	SaveBookReply_DUPLICATE SaveBookReply_ErrorCode = 2
)

var SaveBookReply_ErrorCode_name = map[int32]string{
	0: "OK",
	1: "ERROR",
	2: "DUPLICATE",
}
var SaveBookReply_ErrorCode_value = map[string]int32{
	"OK":        0,
	"ERROR":     1,
	"DUPLICATE": 2,
}

func (x SaveBookReply_ErrorCode) String() string {
	return proto.EnumName(SaveBookReply_ErrorCode_name, int32(x))
}
func (SaveBookReply_ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SearchRequest struct {
	Keyword string `protobuf:"bytes,1,opt,name=keyword" json:"keyword,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SearchReply struct {
	Books []*Book `protobuf:"bytes,1,rep,name=books" json:"books,omitempty"`
}

func (m *SearchReply) Reset()                    { *m = SearchReply{} }
func (m *SearchReply) String() string            { return proto.CompactTextString(m) }
func (*SearchReply) ProtoMessage()               {}
func (*SearchReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SearchReply) GetBooks() []*Book {
	if m != nil {
		return m.Books
	}
	return nil
}

type SaveBookReply struct {
	ErrorCode SaveBookReply_ErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,enum=libre.SaveBookReply_ErrorCode" json:"error_code,omitempty"`
}

func (m *SaveBookReply) Reset()                    { *m = SaveBookReply{} }
func (m *SaveBookReply) String() string            { return proto.CompactTextString(m) }
func (*SaveBookReply) ProtoMessage()               {}
func (*SaveBookReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SaveBookRequest struct {
	Book *Book `protobuf:"bytes,1,opt,name=book" json:"book,omitempty"`
}

func (m *SaveBookRequest) Reset()                    { *m = SaveBookRequest{} }
func (m *SaveBookRequest) String() string            { return proto.CompactTextString(m) }
func (*SaveBookRequest) ProtoMessage()               {}
func (*SaveBookRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SaveBookRequest) GetBook() *Book {
	if m != nil {
		return m.Book
	}
	return nil
}

type FetchBooksReply struct {
	Books []*Book `protobuf:"bytes,1,rep,name=books" json:"books,omitempty"`
}

func (m *FetchBooksReply) Reset()                    { *m = FetchBooksReply{} }
func (m *FetchBooksReply) String() string            { return proto.CompactTextString(m) }
func (*FetchBooksReply) ProtoMessage()               {}
func (*FetchBooksReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FetchBooksReply) GetBooks() []*Book {
	if m != nil {
		return m.Books
	}
	return nil
}

type Book struct {
	Title               string        `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	SubTitle            string        `protobuf:"bytes,2,opt,name=sub_title,json=subTitle" json:"sub_title,omitempty"`
	PublishedDate       string        `protobuf:"bytes,3,opt,name=published_date,json=publishedDate" json:"published_date,omitempty"`
	Description         string        `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Authors             []string      `protobuf:"bytes,5,rep,name=authors" json:"authors,omitempty"`
	IndustryIdentifiers []*Identifier `protobuf:"bytes,6,rep,name=industry_identifiers,json=industryIdentifiers" json:"industry_identifiers,omitempty"`
	ImageLinks          *ImageLink    `protobuf:"bytes,7,opt,name=image_links,json=imageLinks" json:"image_links,omitempty"`
}

func (m *Book) Reset()                    { *m = Book{} }
func (m *Book) String() string            { return proto.CompactTextString(m) }
func (*Book) ProtoMessage()               {}
func (*Book) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Book) GetIndustryIdentifiers() []*Identifier {
	if m != nil {
		return m.IndustryIdentifiers
	}
	return nil
}

func (m *Book) GetImageLinks() *ImageLink {
	if m != nil {
		return m.ImageLinks
	}
	return nil
}

type Identifier struct {
	Type       string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Identifier string `protobuf:"bytes,2,opt,name=identifier" json:"identifier,omitempty"`
}

func (m *Identifier) Reset()                    { *m = Identifier{} }
func (m *Identifier) String() string            { return proto.CompactTextString(m) }
func (*Identifier) ProtoMessage()               {}
func (*Identifier) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ImageLink struct {
	SmallThumbnail string `protobuf:"bytes,1,opt,name=small_thumbnail,json=smallThumbnail" json:"small_thumbnail,omitempty"`
	Thumbnail      string `protobuf:"bytes,2,opt,name=thumbnail" json:"thumbnail,omitempty"`
}

func (m *ImageLink) Reset()                    { *m = ImageLink{} }
func (m *ImageLink) String() string            { return proto.CompactTextString(m) }
func (*ImageLink) ProtoMessage()               {}
func (*ImageLink) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*Empty)(nil), "libre.Empty")
	proto.RegisterType((*SearchRequest)(nil), "libre.SearchRequest")
	proto.RegisterType((*SearchReply)(nil), "libre.SearchReply")
	proto.RegisterType((*SaveBookReply)(nil), "libre.SaveBookReply")
	proto.RegisterType((*SaveBookRequest)(nil), "libre.SaveBookRequest")
	proto.RegisterType((*FetchBooksReply)(nil), "libre.FetchBooksReply")
	proto.RegisterType((*Book)(nil), "libre.Book")
	proto.RegisterType((*Identifier)(nil), "libre.Identifier")
	proto.RegisterType((*ImageLink)(nil), "libre.ImageLink")
	proto.RegisterEnum("libre.SaveBookReply_ErrorCode", SaveBookReply_ErrorCode_name, SaveBookReply_ErrorCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Libre service

type LibreClient interface {
	FetchBooks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FetchBooksReply, error)
	SaveBook(ctx context.Context, in *SaveBookRequest, opts ...grpc.CallOption) (*SaveBookReply, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error)
}

type libreClient struct {
	cc *grpc.ClientConn
}

func NewLibreClient(cc *grpc.ClientConn) LibreClient {
	return &libreClient{cc}
}

func (c *libreClient) FetchBooks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FetchBooksReply, error) {
	out := new(FetchBooksReply)
	err := grpc.Invoke(ctx, "/libre.Libre/FetchBooks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libreClient) SaveBook(ctx context.Context, in *SaveBookRequest, opts ...grpc.CallOption) (*SaveBookReply, error) {
	out := new(SaveBookReply)
	err := grpc.Invoke(ctx, "/libre.Libre/SaveBook", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libreClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error) {
	out := new(SearchReply)
	err := grpc.Invoke(ctx, "/libre.Libre/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Libre service

type LibreServer interface {
	FetchBooks(context.Context, *Empty) (*FetchBooksReply, error)
	SaveBook(context.Context, *SaveBookRequest) (*SaveBookReply, error)
	Search(context.Context, *SearchRequest) (*SearchReply, error)
}

func RegisterLibreServer(s *grpc.Server, srv LibreServer) {
	s.RegisterService(&_Libre_serviceDesc, srv)
}

func _Libre_FetchBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibreServer).FetchBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libre.Libre/FetchBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibreServer).FetchBooks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Libre_SaveBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibreServer).SaveBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libre.Libre/SaveBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibreServer).SaveBook(ctx, req.(*SaveBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Libre_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibreServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libre.Libre/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibreServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Libre_serviceDesc = grpc.ServiceDesc{
	ServiceName: "libre.Libre",
	HandlerType: (*LibreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchBooks",
			Handler:    _Libre_FetchBooks_Handler,
		},
		{
			MethodName: "SaveBook",
			Handler:    _Libre_SaveBook_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Libre_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("libre.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x53, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0xee, 0x5f, 0xda, 0xcd, 0x84, 0xfe, 0x30, 0x54, 0xab, 0xa8, 0xa0, 0xa5, 0x58, 0x42, 0x2c,
	0x07, 0x2a, 0x28, 0x3d, 0x21, 0x21, 0x01, 0xdb, 0x22, 0xad, 0xa8, 0xb4, 0xc8, 0x5b, 0xce, 0x51,
	0xd2, 0x18, 0x6a, 0x35, 0x8d, 0x83, 0xed, 0x80, 0x7a, 0xe0, 0x31, 0x78, 0x0e, 0x5e, 0x11, 0xc5,
	0x49, 0x9a, 0x52, 0x38, 0x70, 0xf3, 0x7c, 0xdf, 0x37, 0xe3, 0xf9, 0x05, 0x27, 0xe2, 0x81, 0x64,
	0x93, 0x44, 0x0a, 0x2d, 0xd0, 0x32, 0x06, 0xe9, 0x80, 0xb5, 0xd8, 0x25, 0x7a, 0x4f, 0x9e, 0x42,
	0xf7, 0x96, 0xf9, 0x72, 0xbd, 0xa1, 0xec, 0x6b, 0xca, 0x94, 0x46, 0x17, 0x3a, 0x5b, 0xb6, 0xff,
	0x2e, 0x64, 0xe8, 0xd6, 0xc7, 0xf5, 0x4b, 0x9b, 0x96, 0x26, 0x79, 0x0e, 0x4e, 0x29, 0x4d, 0xa2,
	0x3d, 0x3e, 0x02, 0x2b, 0x10, 0x62, 0xab, 0xdc, 0xfa, 0xb8, 0x79, 0xe9, 0x4c, 0x9d, 0x49, 0xfe,
	0xcd, 0x3b, 0x21, 0xb6, 0x34, 0x67, 0xc8, 0x0f, 0xe8, 0xde, 0xfa, 0xdf, 0x98, 0x81, 0x8c, 0xcf,
	0x6b, 0x00, 0x26, 0xa5, 0x90, 0xde, 0x5a, 0x84, 0xcc, 0xc4, 0xef, 0x4d, 0x2f, 0x0a, 0xc7, 0x3f,
	0x94, 0x93, 0x45, 0x26, 0xbb, 0x12, 0x21, 0xa3, 0x36, 0x2b, 0x9f, 0xe4, 0x19, 0xd8, 0x07, 0x1c,
	0xdb, 0xd0, 0xb8, 0xf9, 0x30, 0xa8, 0xa1, 0x0d, 0xd6, 0x82, 0xd2, 0x1b, 0x3a, 0xa8, 0x63, 0x17,
	0xec, 0xf9, 0xa7, 0x8f, 0xcb, 0xeb, 0xab, 0xb7, 0xab, 0xc5, 0xa0, 0x41, 0xa6, 0xd0, 0xaf, 0x82,
	0xe6, 0xd5, 0x3d, 0x84, 0x56, 0x96, 0x9a, 0xf9, 0xfa, 0x24, 0x67, 0x43, 0x90, 0x19, 0xf4, 0xdf,
	0x33, 0xbd, 0xde, 0x64, 0x90, 0xfa, 0xef, 0x42, 0x7f, 0x36, 0xa0, 0x95, 0xd9, 0x38, 0x04, 0x4b,
	0x73, 0x1d, 0xb1, 0xa2, 0x77, 0xb9, 0x81, 0xf7, 0xc1, 0x56, 0x69, 0xe0, 0xe5, 0x4c, 0xc3, 0x30,
	0x67, 0x2a, 0x0d, 0x56, 0x86, 0x7c, 0x0c, 0xbd, 0x24, 0x0d, 0x22, 0xae, 0x36, 0x2c, 0xf4, 0x42,
	0x5f, 0x33, 0xb7, 0x69, 0x14, 0xdd, 0x03, 0x3a, 0xf7, 0x35, 0xc3, 0x31, 0x38, 0x21, 0x53, 0x6b,
	0xc9, 0x13, 0xcd, 0x45, 0xec, 0xb6, 0x8c, 0xe6, 0x18, 0xca, 0x26, 0xe7, 0xa7, 0x7a, 0x23, 0xa4,
	0x72, 0xad, 0x71, 0x33, 0x9b, 0x5c, 0x61, 0xe2, 0x1c, 0x86, 0x3c, 0x0e, 0x53, 0xa5, 0xe5, 0xde,
	0xe3, 0x21, 0x8b, 0x35, 0xff, 0xcc, 0x99, 0x54, 0x6e, 0xdb, 0x14, 0x74, 0xb7, 0x28, 0xe8, 0xfa,
	0xc0, 0xd0, 0x7b, 0xa5, 0xbc, 0xc2, 0x14, 0xbe, 0x00, 0x87, 0xef, 0xfc, 0x2f, 0xcc, 0x8b, 0x78,
	0xbc, 0x55, 0x6e, 0xc7, 0xb4, 0x70, 0x50, 0x3a, 0x67, 0xcc, 0x92, 0xc7, 0x5b, 0x0a, 0xbc, 0x7c,
	0x2a, 0xf2, 0x06, 0xa0, 0x8a, 0x80, 0x08, 0x2d, 0xbd, 0x4f, 0xca, 0xde, 0x98, 0x37, 0x5e, 0x00,
	0x54, 0x19, 0x15, 0xbd, 0x39, 0x42, 0x08, 0x05, 0xfb, 0x10, 0x1a, 0x9f, 0x40, 0x5f, 0xed, 0xfc,
	0x28, 0xf2, 0xf4, 0x26, 0xdd, 0x05, 0xb1, 0xcf, 0xa3, 0x22, 0x56, 0xcf, 0xc0, 0xab, 0x12, 0xc5,
	0x07, 0x60, 0x57, 0x92, 0x3c, 0x68, 0x05, 0x4c, 0x7f, 0xd5, 0xc1, 0x5a, 0x66, 0x59, 0xe3, 0x0c,
	0xa0, 0x9a, 0x36, 0xde, 0x29, 0x6a, 0x31, 0x97, 0x31, 0x3a, 0x2f, 0xac, 0x93, 0x75, 0x20, 0x35,
	0x7c, 0x05, 0x67, 0xe5, 0x5e, 0xe1, 0xf9, 0x5f, 0xdb, 0x6b, 0x16, 0x6d, 0x34, 0xfc, 0xd7, 0x56,
	0x93, 0x1a, 0xce, 0xa0, 0x9d, 0x1f, 0x11, 0x1e, 0x14, 0xc7, 0xe7, 0x37, 0xc2, 0x13, 0xd4, 0x78,
	0x05, 0x6d, 0x73, 0xbc, 0x2f, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xab, 0xbd, 0x54, 0x0c, 0xcb,
	0x03, 0x00, 0x00,
}
